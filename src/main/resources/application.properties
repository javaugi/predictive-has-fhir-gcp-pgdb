server.port=${PORT:8088}
springdoc.api-docs.path=/v3/api-docs
application.base-url=http://localhost:8088
spring.main.web-application-type=reactive
#jwt.secret=mySecretKeyWhichShouldBeVeryLongAndRandom123!
jwt.expiration-in-ms=3600000
jwt.expiration=90
jwt.secret=${JWT_SECRET}
PHI_KEY=${PHI_KEY}
################################### SECRETS
#######  http://localhost:8080/actuator to list all endpoints
#management.endpoints.web.base-path=/manage  #endpoints /manage/health etc
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
# default: /v3/api-docs
#springdoc.api-docs.path=/api-docs        
#springdoc.api-docs.swagger-ui.path=/swagger-ui.html 
#
spring.main.lazy-initialization=true
spring.jmx.enabled=false
spring.main.allow-bean-definition-overriding=true
#
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.codec.max-in-memory-size=10MB
##
spring.r2dbc.pool.enabled=true
spring.r2dbc.pool.initial-size=10
spring.r2dbc.pool.max-size=20
spring.r2dbc.pool.max-idle-time=30m
######################################
spring.r2dbc.poolInitialSize=8
spring.r2dbc.poolMaxSize=20
spring.r2dbc.poolMinSize=5
spring.r2dbc.connTimeout=2000
##################################################### GCP
spring.cloud.gcp.sql.enabled=false
spring.ai.gemini.base-url=https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent
spring.ai.gemini.api-key=${GEMNI_API_KEY}
google.gemini.api-key=${GEMNI_API_KEY}
gcp_healthcare_api_base_url=https://healthcare.googleapis.com
gcp_auth_api_url=https://www.googleapis.com/auth/cloud-platform
#spring.ai.gemini.api-key=AIzaSyCtr381hUGjhtgDIW82tzR4HhX86bLsAhA
#google.gemini.api-key=AIzaSyCtr381hUGjhtgDIW82tzR4HhX86bLsAhA
###############
#spring.cloud.gcp.sql.database-name=your_database_name
#spring.cloud.gcp.sql.instance-connection-name=your-project:your-region:your-instance-id
#spring.r2dbc.url=r2dbc:gcp:postgresql://
#spring.r2dbc.username=your_username
#spring.r2dbc.password=your_password
# R2DBC configuration for a local PostgreSQL database
#spring.r2dbc.url=r2dbc:postgresql://localhost:5432/RPG_DEV
# For database initialization (optional but recommended for dev)
#spring.r2dbc.generate-unique-name=false
spring.r2dbc.generate-unique-name=false
spring.flyway.url=jdbc:postgresql://localhost:5432/RPG_DEV
spring.flyway.user=${PGDB_ENVUNM}
spring.flyway.password=${PGDB_ENVPWD}
#####
spring.r2dbc.url=r2dbc:postgresql://localhost:5432/RPG_TEST
spring.r2dbc.username=${PGDB_ENVUNM}
spring.r2dbc.password=${PGDB_ENVPWD}
spring.r2dbc.host=localhost
spring.r2dbc.port=5432
spring.r2dbc.database=RPG_TEST
spring.r2dbc.ddlSchemaDir=/ddl/test/
#########################################
spring.r2dbc.devUrl=r2dbc:postgresql://localhost:5432/RPG_DEV
spring.r2dbc.devUsername=${PGDB_ENVUNM}
spring.r2dbc.devPassword=${PGDB_ENVPWD}
spring.r2dbc.devHost=localhost
spring.r2dbc.devPort=5432
spring.r2dbc.devDatabase=RPG_DEV
spring.r2dbc.devDdlSchemaDir=/ddl/dev/
####
spring.r2dbc.testUrl=r2dbc:postgresql://localhost:5432/RPG_TEST
spring.r2dbc.testUsername=${PGDB_ENVUNM}
spring.r2dbc.testPassword=${PGDB_ENVPWD}
spring.r2dbc.testHost=localhost
spring.r2dbc.testPort=5432
spring.r2dbc.testDatabase=RPG_TEST
spring.r2dbc.testDdlSchemaDir=/ddl/test/
##########
spring.r2dbc.prodUrl=r2dbc:postgresql://localhost:5432/RPG_PROD
spring.r2dbc.prodUsername=${PGDB_ENVUNM}
spring.r2dbc.prodPassword=${PGDB_ENVPWD}
spring.r2dbc.prodHost=localhost
spring.r2dbc.prodPort=5432
spring.r2dbc.prodDatabase=RPG_PROD
spring.r2dbc.prodDdlSchemaDir=/ddl/production/
##########
spring.r2dbc.setupMockUserOnly=false
spring.r2dbc.truncateMockData=true
spring.r2dbc.skipDataInit=false
#########
#################################################
logging.level.org.springframework.web.reactive.resource=DEBUG
logging.level.org.springframework.web.reactive.handler=DEBUG
logging.level.org.springframework.security.web.server=DEBUG
logging.level.org.springframework.r2dbc=DEBUG
#logging.level.com.azure.cosmos=DEBUG
###########################
#dl openai key from https://platform.openai.com/api-keys  https://platform.openai.com/account/api-keys
spring.ai.openai.uri=https://api.openai.com/v1/chat/completions
spring.ai.openai.api-key=${OPEN_API_KEY}
spring.ai.openai.chat.api-key=${OPEN_API_KEY}
application.openai.key=${OPEN_API_KEY}
openai.api.model=gpt-3.5-turbo
# deepseek key from https://platform.deepseek.com/api_keys https://api-docs.deepseek.com/
# app.deepseek.base_url=https://api.deepseek.com/v1  or https://api.deepseek.com/chat/completions
DEEPSEEK_BASE_URL=https://api.deepseek.com
DEFAULT_DEEPSEEK_MODEL=deepseek-chat
DEEPSEEK_API_KEY=${DS_OPEN_API_KEY}
spring.ai.deepseek.openai.api-key=${DS_OPEN_API_KEY}
spring.ai.deepseek.openai.base-url=https://api.deepseek.com/v1/chat/completions
spring.ai.deepseek.openai.chat.options.model=deepseek-chat
spring.ai.deepseek.openai.chat.options.temperature=0.7
spring.ai.openai.embedding.enabled=false
# The DeepSeek API doesn't support embeddings, so we need to disable it.  // llama3 or "mistral", "gemma", etc. medllama2
ollama.baseUrl=http://localhost:11434
ollama.model=llama2
ollama.embeddingModel=llama2
ollama.temperature=0.7
ollama.apiUrl=http://localhost:11434/api/generate
ollama.connTimeoutMillis=5000
ollama.respTimeoutMillis=10000
###
langchain4j.open-ai.client.api-key=${OPEN_API_KEY}
langchain4j.openai.api-key=${OPEN_API_KEY}
###########################
